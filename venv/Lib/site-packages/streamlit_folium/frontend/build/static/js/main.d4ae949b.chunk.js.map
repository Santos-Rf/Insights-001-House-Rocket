{"version":3,"sources":["circle-to-polygon.tsx","index.tsx"],"names":["earthRadius","toRadians","angleInDegrees","Math","PI","toDegrees","angleInRadians","offset","c1","distance","bearing","lat1","lon1","dByR","lat","asin","sin","cos","atan2","circleToPolygon","center","radius","sides","coordinates","i","push","type","onMapClick","e","window","__GLOBAL_DATA__","lat_lng_clicked","latlng","debouncedUpdateComponentValue","map","debounce","updateComponentValue","global_data","previous_data","bounds","getBounds","zoom","getZoom","_data","last_clicked","last_object_clicked","last_object_clicked_tooltip","all_drawings","last_active_drawing","last_circle_radius","last_circle_polygon","getCenter","data","returned_objects","Object","fromEntries","entries","filter","key","includes","JSON","stringify","Streamlit","setComponentValue","onMapMove","extractContent","s","span","document","createElement","innerHTML","textContent","innerText","trim","onDraw","layerType","layer","_latlng","lng","options","polygon","onLayerClick","sourceTarget","_tooltip","_content","tooltip_text","details","toGeoJSON","drawnItems","features","onRender","event","detail","script","args","height","width","html","_default","feature_group","parent_div","getElementById","div1","div2","style","indexOf","a","href","id","body","appendChild","render_script","last_zoom","last_center","last_feature_group","classList","remove","add","html_div","removeLayer","eval","_layers","off","on","setZoom","panTo","initComponent","setFrameHeight","events","addEventListener","RENDER_EVENT","setComponentReady"],"mappings":"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","file":"static/js/main.d4ae949b.chunk.js","sourcesContent":["const earthRadius = 6378137; // equatorial Earth radius in m\n\nfunction toRadians(angleInDegrees: number) {\n    return (angleInDegrees * Math.PI) / 180;\n}\n\nfunction toDegrees(angleInRadians: number) {\n    return (angleInRadians * 180) / Math.PI;\n}\n\nfunction offset(\n    c1: [number, number],\n    distance: number,\n    earthRadius: number,\n    bearing: number): [number, number] {\n    var lat1 = toRadians(c1[1]);\n    var lon1 = toRadians(c1[0]);\n    var dByR = distance / earthRadius;\n    var lat = Math.asin(\n        Math.sin(lat1) * Math.cos(dByR) + Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing)\n    );\n    var lon =\n        lon1 +\n        Math.atan2(\n            Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1),\n            Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat)\n        );\n    return [toDegrees(lon), toDegrees(lat)];\n}\n\nexport function circleToPolygon(center: [number, number], radius: number, sides: number = 32) {\n    var coordinates = [];\n    for (var i = 0; i < sides; ++i) {\n        coordinates.push(\n            offset(\n                center, radius, earthRadius, (2 * Math.PI * i) / sides\n            )\n        );\n    }\n    coordinates.push(coordinates[0]);\n\n    return {\n        type: \"Polygon\",\n        coordinates: [coordinates],\n    };\n};","import { Streamlit, RenderData } from \"streamlit-component-lib\"\nimport { debounce } from \"underscore\"\nimport { circleToPolygon } from \"./circle-to-polygon\"\n\ntype GlobalData = {\n  lat_lng_clicked: any\n  last_object_clicked: any\n  last_object_clicked_tooltip: string | null\n  last_active_drawing: any\n  all_drawings: any\n  zoom: any\n  last_circle_radius: number | null\n  last_circle_polygon: any\n  returned_objects: Array<string>\n  previous_data: any\n  last_zoom: any\n  last_center: any\n  last_feature_group: any\n}\n\ndeclare global {\n  interface Window {\n    __GLOBAL_DATA__: GlobalData\n    initComponent: any\n    map: any\n    drawnItems: any\n    feature_group: any\n  }\n}\n\nfunction onMapClick(e: any) {\n  const global_data = window.__GLOBAL_DATA__\n  global_data.lat_lng_clicked = e.latlng\n  debouncedUpdateComponentValue(window.map)\n}\n\nlet debouncedUpdateComponentValue = debounce(updateComponentValue, 250)\n\nfunction updateComponentValue(map: any) {\n  const global_data = window.__GLOBAL_DATA__\n  let previous_data = global_data.previous_data\n  let bounds = map.getBounds()\n  let zoom = map.getZoom()\n  let _data = {\n    last_clicked: global_data.lat_lng_clicked,\n    last_object_clicked: global_data.last_object_clicked,\n    last_object_clicked_tooltip: global_data.last_object_clicked_tooltip,\n    all_drawings: global_data.all_drawings,\n    last_active_drawing: global_data.last_active_drawing,\n    bounds: bounds,\n    zoom: zoom,\n    last_circle_radius: global_data.last_circle_radius,\n    last_circle_polygon: global_data.last_circle_polygon,\n    center: map.getCenter(),\n  }\n\n  let to_return = global_data.returned_objects\n\n  // Filter down the data to only that data passed in the returned_objects list\n  let data: any = {}\n  if (to_return) {\n    data = Object.fromEntries(\n      Object.entries(_data).filter(([key]) =>\n        global_data.returned_objects.includes(key)\n      )\n    )\n  } else {\n    data = _data\n  }\n  if (JSON.stringify(previous_data) !== JSON.stringify(data)) {\n    global_data.previous_data = data\n    Streamlit.setComponentValue(data)\n  }\n}\n\nfunction onMapMove(e: any) {\n  debouncedUpdateComponentValue(window.map)\n}\n\nfunction extractContent(s: string) {\n  var span = document.createElement('span');\n  span.innerHTML = s;\n  return (span.textContent || span.innerText).trim();\n}\n\nfunction onDraw(e: any) {\n  const global_data = window.__GLOBAL_DATA__\n\n  var type = e.layerType,\n    layer = e.layer\n\n  if (type === \"circle\") {\n    var center: [number, number] = [layer._latlng.lng, layer._latlng.lat]\n    var radius = layer.options.radius // In km\n    var polygon = circleToPolygon(center, radius)\n    global_data.last_circle_radius = radius / 1000 // Convert to km to match what UI shows\n    global_data.last_circle_polygon = polygon\n  }\n  return onLayerClick(e)\n}\n\nfunction onLayerClick(e: any) {\n  const global_data = window.__GLOBAL_DATA__\n  global_data.last_object_clicked = e.latlng\n\n  if (e.sourceTarget._tooltip && e.sourceTarget._tooltip._content) {\n    let tooltip_text = extractContent(e.sourceTarget._tooltip._content);\n    global_data.last_object_clicked_tooltip = tooltip_text;\n  }\n\n  let details: Array<any> = []\n  if (e.layer && e.layer.toGeoJSON) {\n    global_data.last_active_drawing = e.layer.toGeoJSON()\n  }\n  if (window.drawnItems.toGeoJSON) {\n    details = window.drawnItems.toGeoJSON().features\n  }\n  global_data.all_drawings = details\n  debouncedUpdateComponentValue(window.map)\n}\n\nwindow.initComponent = (map: any) => {\n  map.on(\"click\", onMapClick)\n  map.on(\"moveend\", onMapMove)\n  for (let key in map._layers) {\n    let layer = map._layers[key]\n    layer.on(\"click\", onLayerClick)\n  }\n  map.on(\"draw:created\", onDraw)\n  map.on(\"draw:edited\", onDraw)\n  map.on(\"draw:deleted\", onDraw)\n\n  Streamlit.setFrameHeight()\n  updateComponentValue(map)\n}\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n\n  const script: string = data.args[\"script\"]\n  const height: number = data.args[\"height\"]\n  const width: number = data.args[\"width\"]\n  const html: string = data.args[\"html\"]\n  const returned_objects: Array<string> = data.args[\"returned_objects\"]\n  const _default: any = data.args[\"default\"]\n  const zoom: any = data.args[\"zoom\"]\n  const center: any = data.args[\"center\"]\n  const feature_group: string = data.args[\"feature_group\"]\n\n  if (!window.map) {\n    // Only run this if the map hasn't already been created (and thus the global\n    //data hasn't been initialized)\n    const parent_div = document.getElementById(\"parent\")\n    const div1 = document.getElementById(\"map_div\")\n    const div2 = document.getElementById(\"map_div2\")\n    if (div2) {\n      div2.style.height = `${height}px`\n      div2.style.width = `${width}px`\n    }\n    if (div1) {\n      div1.style.height = `${height}px`\n      div1.style.width = `${width}px`\n\n      if (script.indexOf(\"document.getElementById('export')\") !== -1) {\n        let a = document.createElement(\"a\")\n        a.href = \"#\"\n        a.id = \"export\"\n        a.innerHTML = \"Export\"\n        document.body.appendChild(a)\n      }\n\n      const render_script = document.createElement(\"script\")\n      // HACK -- update the folium-generated JS to add, most importantly,\n      // the map to this global variable so that it can be used elsewhere\n      // in the script.\n\n      window.__GLOBAL_DATA__ = {\n        lat_lng_clicked: null,\n        last_object_clicked: null,\n        last_object_clicked_tooltip: null,\n        all_drawings: null,\n        last_active_drawing: null,\n        zoom: null,\n        last_circle_radius: null,\n        last_circle_polygon: null,\n        returned_objects: returned_objects,\n        previous_data: _default,\n        last_zoom: null,\n        last_center: null,\n        last_feature_group: null,\n      }\n      if (script.indexOf(\"map_div2\") !== -1) {\n        parent_div?.classList.remove(\"single\")\n        parent_div?.classList.add(\"double\")\n      }\n\n      // The folium-generated script creates a variable called \"map_div\", which\n      // is the actual Leaflet map.\n      render_script.innerHTML =\n        script + `window.map = map_div; window.initComponent(map_div);`\n      document.body.appendChild(render_script)\n      const html_div = document.createElement(\"div\")\n      html_div.innerHTML = html\n      document.body.appendChild(html_div)\n    }\n  }\n\n  if (\n    feature_group &&\n    feature_group !== window.__GLOBAL_DATA__.last_feature_group\n  ) {\n    if (window.feature_group) {\n      window.map.removeLayer(window.feature_group)\n    }\n    // Though using `eval` is generally a bad idea, we're using it here\n    // because we're evaluating code that we've generated ourselves on the\n    // Python side. This is safe because we're not evaluating user input, so this\n    // couldn't be used to execute arbitrary code.\n\n    // eslint-disable-next-line\n    eval(feature_group)\n    window.__GLOBAL_DATA__.last_feature_group = feature_group\n    for (let key in window.map._layers) {\n      let layer = window.map._layers[key]\n      layer.off(\"click\", onLayerClick)\n      layer.on(\"click\", onLayerClick)\n    }\n  }\n\n  if (zoom && zoom !== window.__GLOBAL_DATA__.last_zoom) {\n    window.map.setZoom(zoom)\n    window.__GLOBAL_DATA__.last_zoom = zoom\n  }\n  if (\n    center &&\n    JSON.stringify(center) !==\n      JSON.stringify(window.__GLOBAL_DATA__.last_center)\n  ) {\n    window.map.panTo(center)\n    window.__GLOBAL_DATA__.last_center = center\n  }\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"sourceRoot":""}